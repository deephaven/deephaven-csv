plugins {
    id 'java'
    id 'signing'
    id 'maven-publish'
}

java {
    withJavadocJar()
    withSourcesJar()
}

def developerId = 'deephaven'
def developerName = 'Deephaven Developers'
def developerEmail = 'developers@deephaven.io'

def projectUrl = 'https://github.com/deephaven/deephaven-csv'
def orgName = 'Deephaven Data Labs'
def orgUrl = 'https://deephaven.io/'

def licenseName = 'The Apache License, Version 2.0'
def licenseUrl = 'https://www.apache.org/licenses/LICENSE-2.0.txt'

def issuesSystem = 'GitHub Issues'
def issuesUrl = 'https://github.com/deephaven/deephaven-csv/issues'

def scmUrl = 'https://github.com/deephaven/deephaven-csv'
def scmConnection = 'scm:git:git://github.com/deephaven/deephaven-csv.git'
def scmDevConnection = 'scm:git:ssh://github.com/deephaven/deephaven-csv.git'

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifactId = archivesBaseName
            pom {
                name = archivesBaseName
                description = project.description
                url = projectUrl
                organization {
                    name = orgName
                    url = orgUrl
                }
                licenses {
                    license {
                        name = licenseName
                        url = licenseUrl
                    }
                }
                scm {
                    url = scmUrl
                    connection = scmConnection
                    developerConnection = scmDevConnection
                }
                issueManagement {
                    system = issuesSystem
                    url = issuesUrl
                }
                developers {
                    developer {
                        id = developerId
                        name = developerName
                        email = developerEmail
                        organization = orgName
                        organizationUrl = orgUrl
                    }
                }
            }
        }
    }
    repositories {
        maven {
            name = 'ossrh'
            // ossrhUsername, ossrhPassword
            credentials(PasswordCredentials)
            def releasesRepoUrl = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
            def snapshotsRepoUrl = 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}

signing {
    sign publishing.publications.mavenJava
    String signingKey = findProperty('signingKey')
    String signingPassword = findProperty('signingPassword')
    if (signingKey != null && signingPassword != null) {
        // In CI, it's harder to pass a file; so if specified, we use the in-memory version.
        useInMemoryPgpKeys(signingKey, signingPassword)
    }
}

tasks.withType(Jar).configureEach {
    manifest {
        attributes(
                'Specification-Title': archivesBaseName,
                'Specification-Version': project.version,
                'Specification-Vendor': orgName,
                'Implementation-Title': archivesBaseName,
                'Implementation-Version': project.version,
                'Implementation-Vendor': orgName,
                'Implementation-Vendor-Id': project.group,
                'Implementation-URL': projectUrl,
                'Bundle-License': licenseUrl)
    }
}
