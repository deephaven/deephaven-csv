plugins {
    id 'java'
    id 'signing'
    id 'com.vanniktech.maven.publish.base'
}

java {
     withSourcesJar()
     withJavadocJar()
}

def developerId = 'deephaven'
def developerName = 'Deephaven Developers'
def developerEmail = 'developers@deephaven.io'

def projectUrl = 'https://github.com/deephaven/deephaven-csv'
def orgName = 'Deephaven Data Labs'
def orgUrl = 'https://deephaven.io/'

def licenseName = 'The Apache License, Version 2.0'
def licenseUrl = 'https://www.apache.org/licenses/LICENSE-2.0.txt'

def issuesSystem = 'GitHub Issues'
def issuesUrl = 'https://github.com/deephaven/deephaven-csv/issues'

def scmUrl = 'https://github.com/deephaven/deephaven-csv'
def scmConnection = 'scm:git:git://github.com/deephaven/deephaven-csv.git'
def scmDevConnection = 'scm:git:ssh://github.com/deephaven/deephaven-csv.git'

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}

mavenPublishing {
    publishToMavenCentral()
    signAllPublications()
    // We only need to override artifactId; groupId (1st argument), version (3rd argument) will be inferred
    coordinates(null, archivesBaseName, null)
    pom {
        name = archivesBaseName
        description = project.description
        url = projectUrl
        organization {
            name = orgName
            url = orgUrl
        }
        licenses {
            license {
                name = licenseName
                url = licenseUrl
            }
        }
        scm {
            url = scmUrl
            connection = scmConnection
            developerConnection = scmDevConnection
        }
        issueManagement {
            system = issuesSystem
            url = issuesUrl
        }
        developers {
            developer {
                id = developerId
                name = developerName
                email = developerEmail
                organization = orgName
                organizationUrl = orgUrl
            }
        }
    }
}

signing {
    required = "true" == findProperty('signingRequired')
    String signingKey = findProperty('signingKey')
    String signingPassword = findProperty('signingPassword')
    if (signingKey != null && signingPassword != null) {
        // In CI, it's harder to pass a file; so if specified, we use the in-memory version.
        useInMemoryPgpKeys(signingKey, signingPassword)
    }
}

tasks.withType(Jar).configureEach {
    manifest {
        attributes(
                'Specification-Title': archivesBaseName,
                'Specification-Version': project.version,
                'Specification-Vendor': orgName,
                'Implementation-Title': archivesBaseName,
                'Implementation-Version': project.version,
                'Implementation-Vendor': orgName,
                'Implementation-Vendor-Id': project.group,
                'Implementation-URL': projectUrl,
                'Bundle-License': licenseUrl)
    }
}
