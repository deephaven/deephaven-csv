import io.deephaven.csv.Constants

plugins {
    id 'io.deephaven.csv.entry'
    id 'me.champeau.jmh' version '0.7.2'
}

description = 'The Deephaven High-Performance CSV Parser'

sourceSets {
    jmhTest {
        compileClasspath += sourceSets.jmh.output
        runtimeClasspath += sourceSets.jmh.output
        runtimeClasspath += sourceSets.main.output
    }
}

configurations {
    // Ensure jmhTest picks up the same dependencies as testImplementation / jmh
    jmhTestImplementation.extendsFrom testImplementation
    jmhTestRuntimeOnly.extendsFrom jmh
}

def customDoubleParser = project.findProperty('customDoubleParser') ?: 'fast-double-parser'

dependencies {
    compileOnly libs.jetbrains.annotations

    annotationProcessor libs.immutables.value
    compileOnly libs.immutables.value.annotations

    if (customDoubleParser == 'fast-double-parser') {
        // By default, use the fast double parser for tests and JMH
        testRuntimeOnly project(':fast-double-parser')
    } else if (customDoubleParser == 'none') {
        // Use the JDK Double parser for tests and JMH
    } else {
        throw new IllegalArgumentException('Invalid customDoubleParser: ' + customDoubleParser)
    }

    testImplementation libs.trove4j
    testImplementation libs.commons.io
    testCompileOnly libs.jetbrains.annotations

    testImplementation libs.assertj
    testImplementation(platform(libs.junit.bom))
    testImplementation libs.junit.jupiter

    jmh libs.jackson.dataformat.csv
    jmh libs.opencsv
    jmh libs.univocity.parsers
    jmh libs.fastcsv
    jmh libs.super.csv
    jmh libs.commons.csv
    jmh libs.simpleflatemapper.csv
}

jmh {
    jmhVersion = libs.versions.jmh
    // -prof gc
    profilers = ['gc']
    // -rf JSON
    resultFormat = 'JSON'

    if (project.hasProperty('jmh.includes')) {
        includes = [ project.property('jmh.includes') ]
    }
}

def registerJmhTest = version -> {
    project.tasks.register("jmhTestOn${version}", Test) { jmhTest ->
        jmhTest.description = "Runs the JMH test suite with Java ${version}."
        jmhTest.group = 'verification'
        jmhTest.testClassesDirs = sourceSets.jmhTest.output.classesDirs
        jmhTest.classpath = sourceSets.jmhTest.runtimeClasspath
        jmhTest.maxHeapSize = '2g'
        jmhTest.javaLauncher.set javaToolchains.launcherFor {
            languageVersion = JavaLanguageVersion.of(version)
        }
    }
}

def jmhTests = Constants.TEST_VERSIONS.collect { v -> registerJmhTest(v) }

tasks.named('check').configure {
    dependsOn jmhClasses
    dependsOn jmhTests
}

tasks.named('assemble').configure {
    dependsOn jmhJar
}

tasks.withType(Test).configureEach {
    inputs.property('customDoubleParser', customDoubleParser)
}

apply plugin: 'io.deephaven.csv.java-publishing-conventions'
