plugins {
    id 'java-library'
    id 'com.diffplug.spotless' version '6.2.0'
    id 'me.champeau.jmh' version '0.6.6'
}

repositories {
    mavenCentral()
}

group = 'io.deephaven'
version = '0.2.0-SNAPSHOT'

description = 'The Deephaven High-Performance CSV Parser'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

sourceSets {
    jmhTest {
        compileClasspath += sourceSets.jmh.output
        runtimeClasspath += sourceSets.jmh.output
        runtimeClasspath += sourceSets.main.output
    }
}

configurations {
    // Ensure jmhTest picks up the same dependencies as testImplementation / jmh
    jmhTestImplementation.extendsFrom testImplementation
    jmhTestRuntimeOnly.extendsFrom jmh
}

dependencies {
    implementation 'ch.randelshofer:fastdoubleparser:0.3.0'
    compileOnly 'org.jetbrains:annotations:23.0.0'

    annotationProcessor 'org.immutables:value:2.8.8'
    compileOnly 'org.immutables:value-annotations:2.9.0'

    testImplementation 'net.sf.trove4j:trove4j:3.0.3'
    testImplementation 'commons-io:commons-io:2.11.0'
    testCompileOnly 'org.jetbrains:annotations:23.0.0'

    testImplementation 'org.assertj:assertj-core:3.22.0'
    testImplementation(platform('org.junit:junit-bom:5.8.2'))
    testImplementation 'org.junit.jupiter:junit-jupiter'

    jmh 'com.fasterxml.jackson.dataformat:jackson-dataformat-csv:2.13.1'
    jmh 'com.opencsv:opencsv:5.5.2'
    jmh 'com.univocity:univocity-parsers:2.9.1'
    jmh 'de.siegmar:fastcsv:2.1.0'
    jmh 'net.sf.supercsv:super-csv:2.4.0'
    jmh 'org.apache.commons:commons-csv:1.9.0'
    jmh 'org.simpleflatmapper:sfm-csv:8.2.3'
}

tasks.named('test') {
    useJUnitPlatform()
}

jmh {
    jmhVersion = '1.34'
    // -prof gc
    profilers = ['gc']
    // -rf JSON
    resultFormat = 'JSON'

    if (project.hasProperty('jmh.includes')) {
        includes = [ project.property('jmh.includes') ]
    }
}

def jmhTestTask = tasks.register('jmhTest', Test) {
    description = 'Runs jmh tests.'
    group = 'verification'

    testClassesDirs = sourceSets.jmhTest.output.classesDirs
    classpath = sourceSets.jmhTest.runtimeClasspath

    maxHeapSize = '2g'

    useJUnitPlatform()
}

spotless {
    java {
        eclipse().configFile("${rootDir}/style/eclipse-java-google-style.xml")
    }
}

check.dependsOn(jmhTestTask)
check.dependsOn(jmhClasses)
assemble.dependsOn(jmhJar)

apply plugin: 'io.deephaven.csv.java-publishing-conventions'
