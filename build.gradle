plugins {
    id 'java-library'
    id 'com.diffplug.spotless' version '6.12.0'
    id 'me.champeau.jmh' version '0.6.8'
}

repositories {
    mavenCentral()
}

group = 'io.deephaven'
version = project.property('version')

description = 'The Deephaven High-Performance CSV Parser'

// Java 11+ required for building
if (!JavaVersion.current().isJava11Compatible()) {
    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(11)
        }
    }
}

// Java 8 compatible jar
tasks.named('compileJava', JavaCompile) {compile ->
    compile.options.release.set 8
}

sourceSets {
    jmhTest {
        compileClasspath += sourceSets.jmh.output
        runtimeClasspath += sourceSets.jmh.output
        runtimeClasspath += sourceSets.main.output
    }
}

configurations {
    // Ensure jmhTest picks up the same dependencies as testImplementation / jmh
    jmhTestImplementation.extendsFrom testImplementation
    jmhTestRuntimeOnly.extendsFrom jmh
}

def customDoubleParser = project.findProperty('customDoubleParser') ?: '11-compatible'

dependencies {
    compileOnly 'org.jetbrains:annotations:23.0.0'

    annotationProcessor 'org.immutables:value:2.9.2'
    compileOnly 'org.immutables:value-annotations:2.9.2'

    if (customDoubleParser == '11-compatible') {
        // By default, use our Java 11 fast double parser for tests and JMH
        testRuntimeOnly project(':fast-double-parser')
    } else if (customDoubleParser == '8-compatible') {
        // Use the Java 8 compatible fast double parser for tests and JMH
        testRuntimeOnly project(':fast-double-parser-8')
    } else if (customDoubleParser == 'none') {
        // Use the JDK Double parser for tests and JMH
    } else {
        throw new IllegalArgumentException('what')
    }

    testImplementation 'net.sf.trove4j:trove4j:3.0.3'
    testImplementation 'commons-io:commons-io:2.11.0'
    testCompileOnly 'org.jetbrains:annotations:23.0.0'

    testImplementation 'org.assertj:assertj-core:3.23.1'
    testImplementation(platform('org.junit:junit-bom:5.9.1'))
    testImplementation 'org.junit.jupiter:junit-jupiter'

    jmh 'com.fasterxml.jackson.dataformat:jackson-dataformat-csv:2.13.4'
    jmh 'com.opencsv:opencsv:5.7.1'
    jmh 'com.univocity:univocity-parsers:2.9.1'
    jmh 'de.siegmar:fastcsv:2.2.0'
    jmh 'net.sf.supercsv:super-csv:2.4.0'
    jmh 'org.apache.commons:commons-csv:1.9.0'
    jmh 'org.simpleflatmapper:sfm-csv:8.2.3'
}

tasks.named('test') { test ->
    test.useJUnitPlatform()
    test.inputs.property('customDoubleParser', customDoubleParser)
}

jmh {
    jmhVersion = '1.34'
    // -prof gc
    profilers = ['gc']
    // -rf JSON
    resultFormat = 'JSON'

    if (project.hasProperty('jmh.includes')) {
        includes = [ project.property('jmh.includes') ]
    }
}

def jmhTestTask = tasks.register('jmhTest', Test) {jmhTest ->
    jmhTest.description = 'Runs jmh tests.'
    jmhTest.group = 'verification'

    jmhTest.inputs.property('customDoubleParser', customDoubleParser)

    jmhTest.testClassesDirs = sourceSets.jmhTest.output.classesDirs
    jmhTest.classpath = sourceSets.jmhTest.runtimeClasspath

    jmhTest.maxHeapSize = '2g'

    jmhTest.useJUnitPlatform()
}

spotless {
    java {
        eclipse().configFile("${rootDir}/style/eclipse-java-google-style.xml")
    }
}

check.dependsOn(jmhTestTask)
check.dependsOn(jmhClasses)
assemble.dependsOn(jmhJar)

apply plugin: 'io.deephaven.csv.java-publishing-conventions'
